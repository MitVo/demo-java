name: Maven Java Semantic Release

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
jobs:
  test:
    name: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17' ##modificar por una variable de entorno u otra configuracion
          distribution: 'temurin'
      - name: Test with maven
        run: mvn clean test
  build:
    needs: test
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17' ##modificar por una variable de entorno u otra configuracion
          distribution: 'temurin'

      - name: Build with maven
        run: mvn clean package

      - name: Get JAR file name
        id: get-jar
        run: |
          JAR_NAME=$(ls target/*.jar | head -n 1)
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV
          echo "{name}=${JAR_NAME}" >> $GITHUB_OUTPUT
      ## This should go to jfrog
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-java-app
          path: ${{ env.JAR_NAME }}

  semantic-release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract repository name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV 

      - name: Generate tag
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag: ${LATEST_TAG}"
          
          # Parse the version components (major, minor, patch)
          if [[ "${LATEST_TAG}" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=1
            MINOR=0
            PATCH=0
          fi
          
          # Increment the patch version
          PATCH=$((PATCH + 1))
          NEXT_TAG="${MAJOR}.${MINOR}.${PATCH}"
          echo "Next tag: ${NEXT_TAG}"
          
          # Create and push the new tag
          git tag "${NEXT_TAG}"
          git push origin "${NEXT_TAG}"
          
          # Store the tag in the environment variable
          echo "RELEASE_TAG=${NEXT_TAG}" >> $GITHUB_ENV

      - name: Semantic Release Custom Action
        uses: MitVo/semantic-release-action@tag-spec
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        with:
          release_branch: develop
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_tag: ${{ env.RELEASE_TAG }}